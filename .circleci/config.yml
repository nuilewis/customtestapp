version: 2.1

jobs:
  test:
    machine:
      image: android:2023.04.1
    steps:
      - checkout
      - run:
          name: create AVD
          command: |
            SYSTEM_IMAGES="system-images;android-29;default;x86"
            sdkmanager "$SYSTEM_IMAGES"
            echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
      - run:
          name: Launch the emulator
          command: |
            emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          background: true
          # runs the emulator in the background
      - run:
          name: Generate cache key
          command: |
            find . -name 'build.gradle' | sort | xargs cat |
            shasum | awk '{print $1}' > /tmp/gradle_cache_seed

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "Download Dependencies"
          command: |
            chmod +x gradlew
            ./gradlew androidDependencies
      - run:
          name: Run tests
          command: ./gradlew test

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Run intergration tests
      - run:
          name: Run connectedAndroidTest task
          command: ./gradlew connectedAndroidTest

      # Wait for emulator to start
      - run:
          name: Wait for emulator
          command: circle-android wait-for-boot      

      # Disable emulator animations
      - run:
          name: Disable animations on emulator
          command: |
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
      #Run intergration tests      
      - run:
          name: Run UI Tests
          command: |
            MAX_TRIES=2
              run_with_retry() {
               n=1
               until [ $n -gt $MAX_TRIES ]
               do
                  echo "Starting test attempt $n"
                  ./gradlew connectedAndroidTest && break
                  n=$[$n+1]
                  sleep 5
               done
               if [ $n -gt $MAX_TRIES ]; then
                 echo "Max tries reached ($MAX_TRIES)"
                 exit 1
               fi
            }
            run_with_retry

      - save_cache:
          key: gradle-v1-{{ arch }}-{{ checksum "/tmp/gradle_cache_seed" }}
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper     

  build:
    docker:
      - image: cimg/android:2023.06
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: "Download Dependencies"
          command: |
            chmod +x gradlew
            ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
   
      - run:
          name: Build Library
          command: ./gradlew assemble

      - store_artifacts:
          path: build/outputs/aar



# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-and-test-workflow:
    jobs:
      - test
      - build:
          requires:
            - test
